// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	medicineImagesFieldNames          = builder.RawFieldNames(&MedicineImages{})
	medicineImagesRows                = strings.Join(medicineImagesFieldNames, ",")
	medicineImagesRowsExpectAutoSet   = strings.Join(stringx.Remove(medicineImagesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	medicineImagesRowsWithPlaceHolder = strings.Join(stringx.Remove(medicineImagesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMedicineImagesIdPrefix = "cache:medicineImages:id:"
)

type (
	medicineImagesModel interface {
		Insert(ctx context.Context, data *MedicineImages) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MedicineImages, error)
		Update(ctx context.Context, data *MedicineImages) error
		Delete(ctx context.Context, id int64) error
		FindAllImage(ctx context.Context, id int64) ([]string, error)
	}

	defaultMedicineImagesModel struct {
		sqlc.CachedConn
		table string
	}

	MedicineImages struct {
		Id         int64  `db:"id"`          // 图片ID
		MedicineId int64  `db:"medicine_id"` // 药品ID
		ImageUrl   string `db:"image_url"`   // 图片链接
	}
)

func newMedicineImagesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMedicineImagesModel {
	return &defaultMedicineImagesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`medicine_images`",
	}
}

func (m *defaultMedicineImagesModel) Delete(ctx context.Context, id int64) error {
	medicineImagesIdKey := fmt.Sprintf("%s%v", cacheMedicineImagesIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, medicineImagesIdKey)
	return err
}

func (m *defaultMedicineImagesModel) FindOne(ctx context.Context, id int64) (*MedicineImages, error) {
	medicineImagesIdKey := fmt.Sprintf("%s%v", cacheMedicineImagesIdPrefix, id)
	var resp MedicineImages
	err := m.QueryRowCtx(ctx, &resp, medicineImagesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", medicineImagesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMedicineImagesModel)FindAllImage(ctx context.Context, id int64) ([]string, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE medicine_id = %s", medicineImagesRows, m.table, id)
	var resp []*MedicineImages
	var urls []string
	err := m.QueryRowsNoCacheCtx(ctx,&resp,query)
	if err != nil{
		return nil, err
	}
	for _, v := range resp{
		urls = append(urls, v.ImageUrl)
	}

	return urls, nil
}




func (m *defaultMedicineImagesModel) Insert(ctx context.Context, data *MedicineImages) (sql.Result, error) {
	medicineImagesIdKey := fmt.Sprintf("%s%v", cacheMedicineImagesIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, medicineImagesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MedicineId, data.ImageUrl)
	}, medicineImagesIdKey)
	return ret, err
}

func (m *defaultMedicineImagesModel) Update(ctx context.Context, data *MedicineImages) error {
	medicineImagesIdKey := fmt.Sprintf("%s%v", cacheMedicineImagesIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, medicineImagesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MedicineId, data.ImageUrl, data.Id)
	}, medicineImagesIdKey)
	return err
}

func (m *defaultMedicineImagesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMedicineImagesIdPrefix, primary)
}

func (m *defaultMedicineImagesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", medicineImagesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMedicineImagesModel) tableName() string {
	return m.table
}

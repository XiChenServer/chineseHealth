// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/pkg/errors"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chineseMedicineInfoFieldNames          = builder.RawFieldNames(&ChineseMedicineInfo{})
	chineseMedicineInfoRows                = strings.Join(chineseMedicineInfoFieldNames, ",")
	chineseMedicineInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(chineseMedicineInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chineseMedicineInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(chineseMedicineInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheChineseMedicineInfoIdPrefix = "cache:chineseMedicineInfo:id:"
)

type (
	chineseMedicineInfoModel interface {
		Insert(ctx context.Context, data *ChineseMedicineInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChineseMedicineInfo, error)
		Update(ctx context.Context, data *ChineseMedicineInfo) error
		Delete(ctx context.Context, id int64) error
		FindOneByName(ctx context.Context, name string) (*ChineseMedicineInfo, error)
		FindOneById(ctx context.Context, id int64) (*ChineseMedicineInfo, error)
		FindMedicineVague(ctx context.Context, keyword string) (*[]ChineseMedicineInfo, error)
		FindAllMedicine(ctx context.Context) (*[]ChineseMedicineInfo, error)
	}

	defaultChineseMedicineInfoModel struct {
		sqlc.CachedConn
		table string
	}

	ChineseMedicineInfo struct {
		Id                int64          `db:"id"`                // 药材ID
		Name              string         `db:"name"`              // 药名
		Alias             sql.NullString `db:"alias"`             // 别名
		Taste             sql.NullString `db:"taste"`             // 性味
		Meridian          sql.NullString `db:"meridian"`          // 归经
		Efficacy          sql.NullString `db:"efficacy"`          // 功效
		UsageDosage       sql.NullString `db:"usage_dosage"`      // 用法用量
		Contraindications sql.NullString `db:"contraindications"` // 禁忌
	}
)

func newChineseMedicineInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultChineseMedicineInfoModel {
	return &defaultChineseMedicineInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`chinese_medicine_info`",
	}
}

func (m *defaultChineseMedicineInfoModel) Delete(ctx context.Context, id int64) error {
	chineseMedicineInfoIdKey := fmt.Sprintf("%s%v", cacheChineseMedicineInfoIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, chineseMedicineInfoIdKey)
	return err
}

func (m *defaultChineseMedicineInfoModel) FindOne(ctx context.Context, id int64) (*ChineseMedicineInfo, error) {
	chineseMedicineInfoIdKey := fmt.Sprintf("%s%v", cacheChineseMedicineInfoIdPrefix, id)
	var resp ChineseMedicineInfo
	err := m.QueryRowCtx(ctx, &resp, chineseMedicineInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chineseMedicineInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}



func (m *defaultChineseMedicineInfoModel) FindOneById(ctx context.Context, id int64) (*ChineseMedicineInfo, error) {
	if id <= 0 {
		return nil, errors.New("invalid ID, must be greater than zero")
	}

	query := fmt.Sprintf("SELECT %s FROM %s WHERE id = ?", medicineImagesRows, m.table)
	var resp *ChineseMedicineInfo
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, id)
	if err != nil {
		// Wrap the error for better context
		return nil, errors.Wrap(err, "failed to fetch Chinese medicine info")
	}
	return resp, nil
}


func (m *defaultChineseMedicineInfoModel) FindOneByName(ctx context.Context, name string) (*ChineseMedicineInfo, error) {
	chineseMedicineInfoIdKey := fmt.Sprintf("%s%v", cacheChineseMedicineInfoIdPrefix, name)
	var resp ChineseMedicineInfo
	err := m.QueryRowCtx(ctx, &resp, chineseMedicineInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chineseMedicineInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, name)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}


func (m *defaultChineseMedicineInfoModel) FindMedicineVague(ctx context.Context, keyword string) (*[]ChineseMedicineInfo, error) {
	var results []ChineseMedicineInfo
	query := fmt.Sprintf(`
        SELECT * FROM %s
        WHERE name LIKE '%%%s%%'
           OR alias LIKE '%%%s%%'
           OR taste LIKE '%%%s%%'
           OR meridian LIKE '%%%s%%'
           OR efficacy LIKE '%%%s%%'
    `, m.table, keyword, keyword, keyword, keyword, keyword)
	m.QueryRowsNoCacheCtx(ctx,&results,query)

	return &results, nil
}


func (m *defaultChineseMedicineInfoModel) FindAllMedicine(ctx context.Context) (*[]ChineseMedicineInfo, error){
	var results []ChineseMedicineInfo
	query := fmt.Sprintf(`
        SELECT * FROM %s
    `, m.table)
	m.QueryRowsNoCacheCtx(ctx,&results,query)
	return &results, nil
}


func (m *defaultChineseMedicineInfoModel) Insert(ctx context.Context, data *ChineseMedicineInfo) (sql.Result, error) {
	chineseMedicineInfoIdKey := fmt.Sprintf("%s%v", cacheChineseMedicineInfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, chineseMedicineInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Alias, data.Taste, data.Meridian, data.Efficacy, data.UsageDosage, data.Contraindications)
	}, chineseMedicineInfoIdKey)
	return ret, err
}

func (m *defaultChineseMedicineInfoModel) Update(ctx context.Context, data *ChineseMedicineInfo) error {
	chineseMedicineInfoIdKey := fmt.Sprintf("%s%v", cacheChineseMedicineInfoIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chineseMedicineInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Alias, data.Taste, data.Meridian, data.Efficacy, data.UsageDosage, data.Contraindications, data.Id)
	}, chineseMedicineInfoIdKey)
	return err
}

func (m *defaultChineseMedicineInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheChineseMedicineInfoIdPrefix, primary)
}

func (m *defaultChineseMedicineInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chineseMedicineInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultChineseMedicineInfoModel) tableName() string {
	return m.table
}

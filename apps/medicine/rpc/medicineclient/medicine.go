// Code generated by goctl. DO NOT EDIT.
// Source: medicine.proto

package medicineclient

import (
	"context"

	"chineseHealthy/apps/medicine/rpc/types/medicine"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChineseMedicineInfo    = medicine.ChineseMedicineInfo
	FindMedicineRequest    = medicine.FindMedicineRequest
	FindMedicineResponse   = medicine.FindMedicineResponse
	ImageCreateRequest     = medicine.ImageCreateRequest
	ImageCreteResponse     = medicine.ImageCreteResponse
	ImageDelRequest        = medicine.ImageDelRequest
	ImageDelResponse       = medicine.ImageDelResponse
	ImageInfo              = medicine.ImageInfo
	MedicineCreateRequest  = medicine.MedicineCreateRequest
	MedicineCreateResponse = medicine.MedicineCreateResponse
	MedicineDelRequest     = medicine.MedicineDelRequest
	MedicineDelResponse    = medicine.MedicineDelResponse
	MedicineFindRequest    = medicine.MedicineFindRequest
	MedicineFindResponse   = medicine.MedicineFindResponse
	MedicineModRequest     = medicine.MedicineModRequest
	MedicineModResponse    = medicine.MedicineModResponse
	ViewAllRequest         = medicine.ViewAllRequest
	ViewAllResponse        = medicine.ViewAllResponse

	Medicine interface {
		MedicineCreate(ctx context.Context, in *MedicineCreateRequest, opts ...grpc.CallOption) (*MedicineCreateResponse, error)
		MedicineDel(ctx context.Context, in *MedicineDelRequest, opts ...grpc.CallOption) (*MedicineDelResponse, error)
		MedicineMod(ctx context.Context, in *MedicineModRequest, opts ...grpc.CallOption) (*MedicineModResponse, error)
		MedicineFind(ctx context.Context, in *MedicineFindRequest, opts ...grpc.CallOption) (*MedicineFindResponse, error)
		ImageCreate(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageCreteResponse, error)
		ImageDelete(ctx context.Context, in *ImageDelRequest, opts ...grpc.CallOption) (*ImageDelResponse, error)
		FindMedicine(ctx context.Context, in *FindMedicineRequest, opts ...grpc.CallOption) (*FindMedicineResponse, error)
		ViewAll(ctx context.Context, in *ViewAllRequest, opts ...grpc.CallOption) (*ViewAllResponse, error)
	}

	defaultMedicine struct {
		cli zrpc.Client
	}
)

func NewMedicine(cli zrpc.Client) Medicine {
	return &defaultMedicine{
		cli: cli,
	}
}

func (m *defaultMedicine) MedicineCreate(ctx context.Context, in *MedicineCreateRequest, opts ...grpc.CallOption) (*MedicineCreateResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.MedicineCreate(ctx, in, opts...)
}

func (m *defaultMedicine) MedicineDel(ctx context.Context, in *MedicineDelRequest, opts ...grpc.CallOption) (*MedicineDelResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.MedicineDel(ctx, in, opts...)
}

func (m *defaultMedicine) MedicineMod(ctx context.Context, in *MedicineModRequest, opts ...grpc.CallOption) (*MedicineModResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.MedicineMod(ctx, in, opts...)
}

func (m *defaultMedicine) MedicineFind(ctx context.Context, in *MedicineFindRequest, opts ...grpc.CallOption) (*MedicineFindResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.MedicineFind(ctx, in, opts...)
}

func (m *defaultMedicine) ImageCreate(ctx context.Context, in *ImageCreateRequest, opts ...grpc.CallOption) (*ImageCreteResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.ImageCreate(ctx, in, opts...)
}

func (m *defaultMedicine) ImageDelete(ctx context.Context, in *ImageDelRequest, opts ...grpc.CallOption) (*ImageDelResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.ImageDelete(ctx, in, opts...)
}

func (m *defaultMedicine) FindMedicine(ctx context.Context, in *FindMedicineRequest, opts ...grpc.CallOption) (*FindMedicineResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.FindMedicine(ctx, in, opts...)
}

func (m *defaultMedicine) ViewAll(ctx context.Context, in *ViewAllRequest, opts ...grpc.CallOption) (*ViewAllResponse, error) {
	client := medicine.NewMedicineClient(m.cli.Conn())
	return client.ViewAll(ctx, in, opts...)
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.11.2
// source: rpc/medicine.proto

package medicine

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MedicineId int64  `protobuf:"varint,2,opt,name=MedicineId,proto3" json:"MedicineId,omitempty"`
	Url        string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{0}
}

func (x *ImageInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ImageInfo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ImageInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// 中药基本信息
type ChineseMedicineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Alias             string       `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Taste             string       `protobuf:"bytes,4,opt,name=taste,proto3" json:"taste,omitempty"`
	Meridian          string       `protobuf:"bytes,5,opt,name=meridian,proto3" json:"meridian,omitempty"`
	Efficacy          string       `protobuf:"bytes,6,opt,name=efficacy,proto3" json:"efficacy,omitempty"`
	UsageDosage       string       `protobuf:"bytes,7,opt,name=usage_dosage,json=usageDosage,proto3" json:"usage_dosage,omitempty"`
	Contraindications string       `protobuf:"bytes,8,opt,name=contraindications,proto3" json:"contraindications,omitempty"`
	ImageInfo         []*ImageInfo `protobuf:"bytes,9,rep,name=image_info,json=imageInfo,proto3" json:"image_info,omitempty"`
}

func (x *ChineseMedicineInfo) Reset() {
	*x = ChineseMedicineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChineseMedicineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChineseMedicineInfo) ProtoMessage() {}

func (x *ChineseMedicineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChineseMedicineInfo.ProtoReflect.Descriptor instead.
func (*ChineseMedicineInfo) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{1}
}

func (x *ChineseMedicineInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChineseMedicineInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChineseMedicineInfo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ChineseMedicineInfo) GetTaste() string {
	if x != nil {
		return x.Taste
	}
	return ""
}

func (x *ChineseMedicineInfo) GetMeridian() string {
	if x != nil {
		return x.Meridian
	}
	return ""
}

func (x *ChineseMedicineInfo) GetEfficacy() string {
	if x != nil {
		return x.Efficacy
	}
	return ""
}

func (x *ChineseMedicineInfo) GetUsageDosage() string {
	if x != nil {
		return x.UsageDosage
	}
	return ""
}

func (x *ChineseMedicineInfo) GetContraindications() string {
	if x != nil {
		return x.Contraindications
	}
	return ""
}

func (x *ChineseMedicineInfo) GetImageInfo() []*ImageInfo {
	if x != nil {
		return x.ImageInfo
	}
	return nil
}

// 药品查找请求
type MedicineFindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MedicineFindRequest) Reset() {
	*x = MedicineFindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineFindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineFindRequest) ProtoMessage() {}

func (x *MedicineFindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineFindRequest.ProtoReflect.Descriptor instead.
func (*MedicineFindRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{2}
}

func (x *MedicineFindRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 药品查找响应
type MedicineFindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64                `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message      string               `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MedicineInfo *ChineseMedicineInfo `protobuf:"bytes,3,opt,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *MedicineFindResponse) Reset() {
	*x = MedicineFindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineFindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineFindResponse) ProtoMessage() {}

func (x *MedicineFindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineFindResponse.ProtoReflect.Descriptor instead.
func (*MedicineFindResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{3}
}

func (x *MedicineFindResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MedicineFindResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MedicineFindResponse) GetMedicineInfo() *ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

type ImageCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls       []string `protobuf:"bytes,1,rep,name=Urls,proto3" json:"Urls,omitempty"`
	MedicineId int64    `protobuf:"varint,2,opt,name=MedicineId,proto3" json:"MedicineId,omitempty"`
}

func (x *ImageCreateRequest) Reset() {
	*x = ImageCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCreateRequest) ProtoMessage() {}

func (x *ImageCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCreateRequest.ProtoReflect.Descriptor instead.
func (*ImageCreateRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{4}
}

func (x *ImageCreateRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

func (x *ImageCreateRequest) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

type ImageCreteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64      `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string     `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Data    *ImageInfo `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ImageCreteResponse) Reset() {
	*x = ImageCreteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCreteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCreteResponse) ProtoMessage() {}

func (x *ImageCreteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCreteResponse.ProtoReflect.Descriptor instead.
func (*ImageCreteResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{5}
}

func (x *ImageCreteResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ImageCreteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ImageCreteResponse) GetData() *ImageInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ImageDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ImageDelRequest) Reset() {
	*x = ImageDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDelRequest) ProtoMessage() {}

func (x *ImageDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDelRequest.ProtoReflect.Descriptor instead.
func (*ImageDelRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{6}
}

func (x *ImageDelRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ImageDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ImageDelResponse) Reset() {
	*x = ImageDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDelResponse) ProtoMessage() {}

func (x *ImageDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDelResponse.ProtoReflect.Descriptor instead.
func (*ImageDelResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{7}
}

func (x *ImageDelResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ImageDelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 药品增加请求
type MedicineCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineInfo *ChineseMedicineInfo `protobuf:"bytes,1,opt,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *MedicineCreateRequest) Reset() {
	*x = MedicineCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineCreateRequest) ProtoMessage() {}

func (x *MedicineCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineCreateRequest.ProtoReflect.Descriptor instead.
func (*MedicineCreateRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{8}
}

func (x *MedicineCreateRequest) GetMedicineInfo() *ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

// 药品增加响应
type MedicineCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64                `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message      string               `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MedicineInfo *ChineseMedicineInfo `protobuf:"bytes,3,opt,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *MedicineCreateResponse) Reset() {
	*x = MedicineCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineCreateResponse) ProtoMessage() {}

func (x *MedicineCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineCreateResponse.ProtoReflect.Descriptor instead.
func (*MedicineCreateResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{9}
}

func (x *MedicineCreateResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MedicineCreateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MedicineCreateResponse) GetMedicineInfo() *ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

// 药品删除请求
type MedicineDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MedicineDelRequest) Reset() {
	*x = MedicineDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineDelRequest) ProtoMessage() {}

func (x *MedicineDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineDelRequest.ProtoReflect.Descriptor instead.
func (*MedicineDelRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{10}
}

func (x *MedicineDelRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 药品删除响应
type MedicineDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int64  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *MedicineDelResponse) Reset() {
	*x = MedicineDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineDelResponse) ProtoMessage() {}

func (x *MedicineDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineDelResponse.ProtoReflect.Descriptor instead.
func (*MedicineDelResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{11}
}

func (x *MedicineDelResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MedicineDelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 药品修改请求
type MedicineModRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MedicineInfo *ChineseMedicineInfo `protobuf:"bytes,2,opt,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *MedicineModRequest) Reset() {
	*x = MedicineModRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineModRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineModRequest) ProtoMessage() {}

func (x *MedicineModRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineModRequest.ProtoReflect.Descriptor instead.
func (*MedicineModRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{12}
}

func (x *MedicineModRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MedicineModRequest) GetMedicineInfo() *ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

// 药品修改响应
type MedicineModResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         int64                `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Message      string               `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	MedicineInfo *ChineseMedicineInfo `protobuf:"bytes,3,opt,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *MedicineModResponse) Reset() {
	*x = MedicineModResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineModResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineModResponse) ProtoMessage() {}

func (x *MedicineModResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineModResponse.ProtoReflect.Descriptor instead.
func (*MedicineModResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{13}
}

func (x *MedicineModResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MedicineModResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MedicineModResponse) GetMedicineInfo() *ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

type FindMedicineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *FindMedicineRequest) Reset() {
	*x = FindMedicineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMedicineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMedicineRequest) ProtoMessage() {}

func (x *FindMedicineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMedicineRequest.ProtoReflect.Descriptor instead.
func (*FindMedicineRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{14}
}

func (x *FindMedicineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FindMedicineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineInfo []*ChineseMedicineInfo `protobuf:"bytes,1,rep,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *FindMedicineResponse) Reset() {
	*x = FindMedicineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMedicineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMedicineResponse) ProtoMessage() {}

func (x *FindMedicineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMedicineResponse.ProtoReflect.Descriptor instead.
func (*FindMedicineResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{15}
}

func (x *FindMedicineResponse) GetMedicineInfo() []*ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

type ViewAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ViewAllRequest) Reset() {
	*x = ViewAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewAllRequest) ProtoMessage() {}

func (x *ViewAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewAllRequest.ProtoReflect.Descriptor instead.
func (*ViewAllRequest) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{16}
}

type ViewAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineInfo []*ChineseMedicineInfo `protobuf:"bytes,1,rep,name=medicine_info,json=medicineInfo,proto3" json:"medicine_info,omitempty"`
}

func (x *ViewAllResponse) Reset() {
	*x = ViewAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_medicine_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewAllResponse) ProtoMessage() {}

func (x *ViewAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_medicine_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewAllResponse.ProtoReflect.Descriptor instead.
func (*ViewAllResponse) Descriptor() ([]byte, []int) {
	return file_rpc_medicine_proto_rawDescGZIP(), []int{17}
}

func (x *ViewAllResponse) GetMedicineInfo() []*ChineseMedicineInfo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

var File_rpc_medicine_proto protoreflect.FileDescriptor

var file_rpc_medicine_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x22, 0x4d,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xa2, 0x02,
	0x0a, 0x13, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x69, 0x61,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x66, 0x66, 0x69, 0x63, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x66, 0x66, 0x69, 0x63, 0x61, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x72,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x6b,
	0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x21, 0x0a, 0x0f, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40,
	0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x5b, 0x0a, 0x15, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01,
	0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x43, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x87, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x13, 0x46, 0x69, 0x6e,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x10, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x55, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe6, 0x04, 0x0a, 0x08, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46,
	0x69, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x12, 0x18, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_medicine_proto_rawDescOnce sync.Once
	file_rpc_medicine_proto_rawDescData = file_rpc_medicine_proto_rawDesc
)

func file_rpc_medicine_proto_rawDescGZIP() []byte {
	file_rpc_medicine_proto_rawDescOnce.Do(func() {
		file_rpc_medicine_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_medicine_proto_rawDescData)
	})
	return file_rpc_medicine_proto_rawDescData
}

var file_rpc_medicine_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_rpc_medicine_proto_goTypes = []interface{}{
	(*ImageInfo)(nil),              // 0: medicine.ImageInfo
	(*ChineseMedicineInfo)(nil),    // 1: medicine.ChineseMedicineInfo
	(*MedicineFindRequest)(nil),    // 2: medicine.MedicineFindRequest
	(*MedicineFindResponse)(nil),   // 3: medicine.MedicineFindResponse
	(*ImageCreateRequest)(nil),     // 4: medicine.ImageCreateRequest
	(*ImageCreteResponse)(nil),     // 5: medicine.ImageCreteResponse
	(*ImageDelRequest)(nil),        // 6: medicine.ImageDelRequest
	(*ImageDelResponse)(nil),       // 7: medicine.ImageDelResponse
	(*MedicineCreateRequest)(nil),  // 8: medicine.MedicineCreateRequest
	(*MedicineCreateResponse)(nil), // 9: medicine.MedicineCreateResponse
	(*MedicineDelRequest)(nil),     // 10: medicine.MedicineDelRequest
	(*MedicineDelResponse)(nil),    // 11: medicine.MedicineDelResponse
	(*MedicineModRequest)(nil),     // 12: medicine.MedicineModRequest
	(*MedicineModResponse)(nil),    // 13: medicine.MedicineModResponse
	(*FindMedicineRequest)(nil),    // 14: medicine.FindMedicineRequest
	(*FindMedicineResponse)(nil),   // 15: medicine.FindMedicineResponse
	(*ViewAllRequest)(nil),         // 16: medicine.ViewAllRequest
	(*ViewAllResponse)(nil),        // 17: medicine.ViewAllResponse
}
var file_rpc_medicine_proto_depIdxs = []int32{
	0,  // 0: medicine.ChineseMedicineInfo.image_info:type_name -> medicine.ImageInfo
	1,  // 1: medicine.MedicineFindResponse.medicine_info:type_name -> medicine.ChineseMedicineInfo
	0,  // 2: medicine.ImageCreteResponse.Data:type_name -> medicine.ImageInfo
	1,  // 3: medicine.MedicineCreateRequest.medicine_info:type_name -> medicine.ChineseMedicineInfo
	1,  // 4: medicine.MedicineCreateResponse.medicine_info:type_name -> medicine.ChineseMedicineInfo
	1,  // 5: medicine.MedicineModRequest.medicine_info:type_name -> medicine.ChineseMedicineInfo
	1,  // 6: medicine.MedicineModResponse.medicine_info:type_name -> medicine.ChineseMedicineInfo
	1,  // 7: medicine.FindMedicineResponse.medicine_info:type_name -> medicine.ChineseMedicineInfo
	1,  // 8: medicine.ViewAllResponse.medicine_info:type_name -> medicine.ChineseMedicineInfo
	8,  // 9: medicine.Medicine.MedicineCreate:input_type -> medicine.MedicineCreateRequest
	10, // 10: medicine.Medicine.MedicineDel:input_type -> medicine.MedicineDelRequest
	12, // 11: medicine.Medicine.MedicineMod:input_type -> medicine.MedicineModRequest
	2,  // 12: medicine.Medicine.MedicineFind:input_type -> medicine.MedicineFindRequest
	4,  // 13: medicine.Medicine.ImageCreate:input_type -> medicine.ImageCreateRequest
	6,  // 14: medicine.Medicine.ImageDelete:input_type -> medicine.ImageDelRequest
	14, // 15: medicine.Medicine.FindMedicine:input_type -> medicine.FindMedicineRequest
	16, // 16: medicine.Medicine.ViewAll:input_type -> medicine.ViewAllRequest
	9,  // 17: medicine.Medicine.MedicineCreate:output_type -> medicine.MedicineCreateResponse
	11, // 18: medicine.Medicine.MedicineDel:output_type -> medicine.MedicineDelResponse
	13, // 19: medicine.Medicine.MedicineMod:output_type -> medicine.MedicineModResponse
	3,  // 20: medicine.Medicine.MedicineFind:output_type -> medicine.MedicineFindResponse
	5,  // 21: medicine.Medicine.ImageCreate:output_type -> medicine.ImageCreteResponse
	7,  // 22: medicine.Medicine.ImageDelete:output_type -> medicine.ImageDelResponse
	15, // 23: medicine.Medicine.FindMedicine:output_type -> medicine.FindMedicineResponse
	17, // 24: medicine.Medicine.ViewAll:output_type -> medicine.ViewAllResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_rpc_medicine_proto_init() }
func file_rpc_medicine_proto_init() {
	if File_rpc_medicine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_medicine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChineseMedicineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineFindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineFindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCreteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineModRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineModResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMedicineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMedicineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_medicine_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_medicine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_medicine_proto_goTypes,
		DependencyIndexes: file_rpc_medicine_proto_depIdxs,
		MessageInfos:      file_rpc_medicine_proto_msgTypes,
	}.Build()
	File_rpc_medicine_proto = out.File
	file_rpc_medicine_proto_rawDesc = nil
	file_rpc_medicine_proto_goTypes = nil
	file_rpc_medicine_proto_depIdxs = nil
}
